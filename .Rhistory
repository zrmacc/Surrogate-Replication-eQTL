resid_var = 1
)
# Run Simulation.
sim <- lapply(seq_len(params$reps), function(b) {
out <- PowerSimLoop(params = params)
return(out)
})
sim <- data.frame(do.call(rbind, sim))
# Assess power.
pvals <- subset(
x = sim,
select = c("p.b.biv", "p.b.uni")
)
apply(pvals, 2, function(x) {mean(x<=0.05)})
apply(pvals, 2, function(x) {mean(x<=1e-3)})
apply(pvals, 2, function(x) {mean(x<=1e-5)})
apply(pvals, 2, function(x) {mean(x<=1e-6)})
setwd("~/Documents/Lab/Projects/Surrogates/Replication/")
library(SurrogateRegression)
#' Power Calculation for Linear Regression
#'
#' @param beta Regression coefficient.
#' @param covar_var Marginal variance of the covariate.
#' @param resid_var Residual variance of
# -----------------------------------------------------------------------------
# Fixing Power simulations.
# -----------------------------------------------------------------------------
source("SimLoops.R")
# Simulation parameters.
n0 <- 1e3
snps <- 100
reps <- 100
idx <- 1
out <- "Test/"
mT <- 0
mS <- 0
rho <- 0
pve <- 0.001
params <- list(
"n0" = n0,
"snps" = snps,
"reps" = reps,
"idx" = idx,
"out" = out,
"mT" = mT,
"mS" = mS,
"rho" = rho,
"pve" = pve
)
# Effect Sizes.
CalcEffectSizes(
n_covar = 2,
pve_covar = 0.20,
pve_geno = pve,
n_pcs = 3,
pve_pcs = 0.05,
resid_var = 1
)
# Run Simulation.
sim <- lapply(seq_len(params$reps), function(b) {
out <- PowerSimLoop(params = params)
return(out)
})
sim <- data.frame(do.call(rbind, sim))
# Assess power.
pvals <- subset(
x = sim,
select = c("p.b.biv", "p.b.uni")
)
apply(pvals, 2, function(x) {mean(x<=0.05)})
apply(pvals, 2, function(x) {mean(x<=1e-3)})
apply(pvals, 2, function(x) {mean(x<=1e-5)})
apply(pvals, 2, function(x) {mean(x<=1e-6)})
setwd("~/Documents/Lab/Projects/Surrogates/Replication/")
library(SurrogateRegression)
#' Power Calculation for Linear Regression
#'
#' @param beta Regression coefficient.
#' @param covar_var Marginal variance of the covariate.
#' @param resid_var Residual variance of the response given the covariate.
#' @return Numeric estimated power of the two-sided chi-square test.
Power.LinReg
# -----------------------------------------------------------------------------
# Fixing Power simulations.
# -----------------------------------------------------------------------------
source("SimLoops.R")
# Simulation parameters.
n0 <- 1e3
snps <- 100
reps <- 100
idx <- 1
out <- "Test/"
mT <- 0
mS <- 0
rho <- 0
pve <- 0.005
params <- list(
"n0" = n0,
"snps" = snps,
"reps" = reps,
"idx" = idx,
"out" = out,
"mT" = mT,
"mS" = mS,
"rho" = rho,
"pve" = pve
)
# Effect Sizes.
CalcEffectSizes(
n_covar = 2,
pve_covar = 0.20,
pve_geno = pve,
n_pcs = 3,
pve_pcs = 0.05,
resid_var = 1
)
# Run Simulation.
sim <- lapply(seq_len(params$reps), function(b) {
out <- PowerSimLoop(params = params)
return(out)
})
sim <- data.frame(do.call(rbind, sim))
# Assess power.
pvals <- subset(
x = sim,
select = c("p.b.biv", "p.b.uni")
)
apply(pvals, 2, function(x) {mean(x<=0.05)})
apply(pvals, 2, function(x) {mean(x<=1e-3)})
apply(pvals, 2, function(x) {mean(x<=1e-5)})
apply(pvals, 2, function(x) {mean(x<=1e-6)})
# Non-centrality parameter.
ncp <- beta^2 * covar_var / resid_var
beta = 0.2
# Non-centrality parameter.
ncp <- beta^2 * covar_var / resid_var
covar_var <- 1
resid_var <- 1
power
# Power.
power <- qchisq(
p = pchisq(q = alpha, df = 1, lower.tail = FALSE)
)
alpha = 0.05
# Power.
power <- qchisq(
p = pchisq(q = alpha, df = 1, lower.tail = FALSE)
)
df = 1
power <- qchisq(
p = pchisq(q = alpha, df = 1, lower.tail = FALSE),
df = 1
)
power
# Power.
power <- pchisq(
q = qchisq(p = alpha, df = 1, lower.tail = FALSE),
df = 1
)
power
# Power.
power <- pchisq(
q = qchisq(p = alpha, df = 1, lower.tail = FALSE),
df = 1,
ncp = ncp
)
# Non-centrality parameter.
ncp <- beta^2 * covar_var / resid_var
# Power.
power <- pchisq(
q = qchisq(p = alpha, df = 1, lower.tail = FALSE),
df = 1,
ncp = ncp
)
power
# Power.
power <- pchisq(
q = qchisq(p = alpha, df = 1, lower.tail = FALSE),
df = 1,
ncp = ncp,
lower.tail = FALSE
)
POWER
power
# Effect Sizes.
CalcEffectSizes(
n_covar = 2,
pve_covar = 0.20,
pve_geno = pve,
n_pcs = 3,
pve_pcs = 0.05,
resid_var = 1
)
beta
beta = 0.08
n=1e3
# Non-centrality parameter.
ncp <- n * beta^2 * covar_var / resid_var
# Power.
power <- pchisq(
q = qchisq(p = alpha, df = 1, lower.tail = FALSE),
df = 1,
ncp = ncp,
lower.tail = FALSE
)
power
beta
beta = 0.08
# Non-centrality parameter.
ncp <- n * beta^2 * covar_var / resid_var
# Power.
power <- pchisq(
q = qchisq(p = alpha, df = 1, lower.tail = FALSE),
df = 1,
ncp = ncp,
lower.tail = FALSE
)
power
Power.LinReg <- function(alpha = 0.05, beta, covar_var, n, resid_var) {
# Non-centrality parameter.
ncp <- n * beta^2 * covar_var / resid_var
# Power.
power <- pchisq(
q = qchisq(p = alpha, df = 1, lower.tail = FALSE),
df = 1,
ncp = ncp,
lower.tail = FALSE
)
return(power)
}
apply(pvals, 2, function(x) {mean(x<=0.05)})
apply(pvals, 2, function(x) {mean(x<=1e-3)})
apply(pvals, 2, function(x) {mean(x<=1e-5)})
apply(pvals, 2, function(x) {mean(x<=1e-6)})
# Effect Sizes.
betas <- CalcEffectSizes(
n_covar = 2,
pve_covar = 0.20,
pve_geno = pve,
n_pcs = 3,
pve_pcs = 0.05,
resid_var = 1
)
bg <- betas$bg
bg
# Effect Sizes.
betas <- CalcEffectSizes(
n_covar = 2,
pve_covar = 0.20,
pve_geno = pve,
n_pcs = 3,
pve_pcs = 0.05,
resid_var = 1
)
bg <- betas$bg
Power.LinReg(
alpha = 0.05,
beta = bg,
covar_var = 1,
n = n0,
resid_var = 1
)
apply(pvals, 2, function(x) {mean(x<=0.05)})
WrapPower <- function(alpha) {
Power.LinReg(
alpha = alpha,
beta = bg,
covar_var = 1,
n = n0,
resid_var = 1
)
}
# Effect Sizes.
betas <- CalcEffectSizes(
n_covar = 2,
pve_covar = 0.20,
pve_geno = pve,
n_pcs = 3,
pve_pcs = 0.05,
resid_var = 1
)
bg <- betas$bg
WrapPower <- function(alpha) {
Power.LinReg(
alpha = alpha,
beta = bg,
covar_var = 1,
n = n0,
resid_var = 1
)
}
# Power
WrapPower(0.05)
WrapPower(1e-3)
apply(pvals, 2, function(x) {mean(x<=1e-3)})
WrapPower(1e-4)
apply(pvals, 2, function(x) {mean(x<=1e-5)})
WrapPower(1e-5)
# Effect Sizes.
betas <- CalcEffectSizes(
n_covar = 2,
pve_covar = 0.20,
pve_geno = pve,
n_pcs = 3,
pve_pcs = 0.05,
resid_var = 1
)
bg <- betas$bg
WrapPower <- function(alpha) {
Power.LinReg(
alpha = alpha,
beta = bg,
covar_var = 1,
n = n0,
resid_var = 1
)
}
# Power.
WrapPower(0.05)
WrapPower(1e-3)
WrapPower(1e-5)
pve
# Theoretical power curve.
pves <- seq(from = 0.001, to = 0.010, length.out = 101)
betas <- CalcEffectSizes(
n_covar = 2,
pve_covar = 0.20,
pve_geno = pve,
n_pcs = 3,
pve_pcs = 0.05,
resid_var = 1
)
betas
Power.LinReg(
alpha = 0.05,
beta = betas$bg,
covar_var = 1,
n = n0,
resid_var = 1
)
# Theoretical power curve.
WrapPowerPVE <- function(pve) {
betas <- CalcEffectSizes(
n_covar = 2,
pve_covar = 0.20,
pve_geno = pve,
n_pcs = 3,
pve_pcs = 0.05,
resid_var = 1
)
power <- Power.LinReg(
alpha = 0.05,
beta = betas$bg,
covar_var = 1,
n = n0,
resid_var = 1
)
return(power)
}
pves <- seq(from = 0.001, to = 0.010, length.out = 101)
pwrs <- WrapPowerPVE(pves)
pwrs <- sapply(pves, WrapPowerPVE)
pwrs
plot(pves, pwrs)
pves
n
pves <- seq(from = 0.001, to = 0.010, by = 0.001)
pwrs <- sapply(pves, WrapPowerPVE)
plot(pves, pwrs)
setwd("~/Documents/Lab/Projects/Surrogates/Replication/")
library(SurrogateRegression)
#' Power Calculation for Linear Regression
#'
#' @param alpha Type I error level.
#' @param beta Regression coefficient.
#' @param covar_var Marginal variance of the covariate.
#' @param n Sample size.
#' @param resid_var Residual variance of the response given the covariate.
#' @return Numeric estimated power of the two-sided chi-square test.
#'
#' @import stats
#' @export
Power.LinReg <- function(alpha = 0.05, beta, covar_var, n, resid_var) {
# Non-centrality parameter.
ncp <- n * beta^2 * covar_var / resid_var
# Power.
power <- pchisq(
q = qchisq(p = alpha, df = 1, lower.tail = FALSE),
df = 1,
ncp = ncp,
lower.tail = FALSE
)
return(power)
}
# -----------------------------------------------------------------------------
# Fixing Power simulations.
# -----------------------------------------------------------------------------
source("SimLoops.R")
# Simulation parameters.
n0 <- 1e3
snps <- 100
reps <- 100
idx <- 1
out <- "Test/"
mT <- 0
mS <- 0
rho <- 0
pve <- 0.003
params <- list(
"n0" = n0,
"snps" = snps,
"reps" = reps,
"idx" = idx,
"out" = out,
"mT" = mT,
"mS" = mS,
"rho" = rho,
"pve" = pve
)
# Effect Sizes.
betas <- CalcEffectSizes(
n_covar = 2,
pve_covar = 0.20,
pve_geno = pve,
n_pcs = 3,
pve_pcs = 0.05,
resid_var = 1
)
bg <- betas$bg
WrapPower <- function(alpha) {
Power.LinReg(
alpha = alpha,
beta = bg,
covar_var = 1,
n = n0,
resid_var = 1
)
}
# Power.
WrapPower(0.05)
WrapPower(1e-3)
WrapPower(1e-5)
# Theoretical power curve.
# WrapPowerPVE <- function(pve) {
#   betas <- CalcEffectSizes(
#     n_covar = 2,
#     pve_covar = 0.20,
#     pve_geno = pve,
#     n_pcs = 3,
#     pve_pcs = 0.05,
#     resid_var = 1
#   )
#
#   power <- Power.LinReg(
#     alpha = 0.05,
#     beta = betas$bg,
#     covar_var = 1,
#     n = n0,
#     resid_var = 1
#   )
#
#   return(power)
# }
#
# pves <- seq(from = 0.001, to = 0.010, by = 0.001)
# pwrs <- sapply(pves, WrapPowerPVE)
# Run Simulation.
sim <- lapply(seq_len(params$reps), function(b) {
out <- PowerSimLoop(params = params)
return(out)
})
sim <- data.frame(do.call(rbind, sim))
# Assess power.
pvals <- subset(
x = sim,
select = c("p.b.biv", "p.b.uni")
)
apply(pvals, 2, function(x) {mean(x<=0.05)})
apply(pvals, 2, function(x) {mean(x<=1e-3)})
apply(pvals, 2, function(x) {mean(x<=1e-5)})
apply(pvals, 2, function(x) {mean(x<=1e-6)})
length(pves)
library(fread)
library(data.table)
input <- fread(file = 'PowerConfig.txt')
head(input)
output <- unique(input[, 1:4])
output
tail(input)
input <- fread(file = 'SizeConfig.txt')
input
output <- unique(input[,2:4])
output
row = output[i, ]
i1=
1
i=
1
row = output[i, ]
row
pves
out <- cbind(row, pves)
out
aux <- function(i) {
row <- output[i, ]
out <- cbind(row, pves)
return(out)
}
out <- lapply(seq(1:28), aux)
out <- do.call(rbind, out)
out
fwrite(x = out, file = 'PowerConfig.txt')
